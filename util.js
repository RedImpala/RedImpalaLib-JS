var crypto = require('crypto');

var hash = module.exports.hash = function hash(hashType, data) {
  return crypto.createHash(hashType).update(data).digest();
}

var hashn = module.exports.hashn = function hashn(hashType, iterations, data) {
  if (iterations < 1)
    throw new Exception("Invalid iteration count");
  while (iterations-- > 0)
    data = hash(hashType, data);
  return data;
}

// Dashlane uses OpenSSL EVP_BytesToKey. Or at least it should. I have no idea.
// This is a cleaner implementation from their website.
// http://cvs.openssl.org/fileview?f=openssl/doc/ssleay.txt&v=1.5.4.2
module.exports.BytesToKey = function BytesToKey(password, salt, iterations) {
  var M = [];
  var orig = Buffer.concat([password, salt]);
  M[0] = hashn('sha1', iterations, orig);

  var i = 1;
  // 48 = the amount of bytes needed for AES-256
  // 20 = the amount of bytes generated by a single SHA-1 hash.
  // We need 3 (48 / 20) hashes to get enough bytes for our keys.
  while (M.length < 48 / 20) {
    M[i] = hashn('sha1', iterations, Buffer.concat([M[i - 1], orig]));
    i++;
  }
  var finalValue = Buffer.concat(M);
  return {
    key: finalValue.slice(0, 32),
    iv: finalValue.slice(32, 32 + 16)
  };
}
